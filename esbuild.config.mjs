import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { copy } from "esbuild-plugin-copy";
import { clean } from "esbuild-plugin-clean";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const isProd = process.argv[2] === "production";
console.log({ isProd });
const sandbox_path =
	"./sandbox/sandbox-outline-editor/.obsidian/plugins/outline-editor-plugin";
const sharedContext = {
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	treeShaking: true,
};
const prodContext = {
	outdir: "dist",
	sourcemap: false,
	plugins: [
		clean({
			patterns: ["./dist/*"],
			// cleanOnStartPatterns: ["./prepare"],
			// cleanOnEndPatterns: ["./post"],
		}),
		copy({
			// this is equal to process.cwd(), which means we use cwd path as base path to resolve `to` path
			// if not specified, this plugin uses ESBuild.build outdir/outfile options as base path.
			resolveFrom: "cwd",
			assets: [
				{
					from: ["./assets/*"],
					to: ["./dist"],
				},
				{
					from: ["./manifest.json"],
					to: ["./dist/manifest.json"],
				},
			],
		}),
	],
};
const sandboxContext = {
	outdir: sandbox_path,

	sourcemap: "inline",
	plugins: [
		clean({
			patterns: [sandbox_path],
			// cleanOnStartPatterns: ["./prepare"],
			// cleanOnEndPatterns: ["./post"],
		}),
		copy({
			// this is equal to process.cwd(), which means we use cwd path as base path to resolve `to` path
			// if not specified, this plugin uses ESBuild.build outdir/outfile options as base path.
			resolveFrom: "cwd",
			assets: [
				{
					from: ["./assets/*"],
					to: [sandbox_path],
				},
				{
					from: ["./manifest.json"],
					to: [sandbox_path + "/manifest.json"],
				},
			],
		}),
	],
};
const buildContext = (isProd) => {
	const context = isProd ? prodContext : sandboxContext;
	return {
		...sharedContext,
		...context,
	};
};
const context = await esbuild.context(buildContext(isProd));

if (isProd) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
